package org.openmrs.module.savicspharmacy.api.entity;

// Generated May 7, 2021 3:23:28 PM by Hibernate Tools 4.3.1
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.openmrs.BaseOpenmrsData;
import org.openmrs.api.context.Context;
import org.openmrs.module.savicspharmacy.SavicsPharmacyModuleActivator;

/**
 * Item generated by hbm2java
 */
public class Item extends BaseOpenmrsData implements java.io.Serializable {
	
	private Integer id;
	
	private Route route;
	
	private Unit unit;
	
	private String uuid;
	
	private String code;
	
	private String name;
	
	private String description;
	
	private Double sellPrice;
	
	private double buyPrice;
	
	private Integer virtualstock; // must be managed by triggers. Updated when ItemLine change
	
	private Integer soh;// must be managed by triggers. Updated when ItemLine change 
	
	private Integer stockMin;
	
	private Integer stockMax;
	
	private Double AMC;
	
	private Set itemsLines = new HashSet(0);
	
	private Set orderDetails = new HashSet(0);
	
	private Set sendingDetails = new HashSet(0);
	
	private Set transactions = new HashSet(0);
	
	private Set receptionDetails = new HashSet(0);
	
	//Non persistant field
	private int numberOfExpiredLots; // Computed value
	
	private int numberOfNearExpiredLots; // Computed value
	
	private int expiredQuantity; // Computed value
	
	public Integer getId() {
		return this.id;
	}
	
	public void setId(Integer id) {
		this.id = id;
	}
	
	public Route getRoute() {
		return this.route;
	}
	
	public void setRoute(Route route) {
		this.route = route;
	}
	
	public Unit getUnit() {
		return this.unit;
	}
	
	public void setUnit(Unit unit) {
		this.unit = unit;
	}
	
	public String getCode() {
		return this.code;
	}
	
	public void setCode(String code) {
		this.code = code;
	}
	
	public String getName() {
		return this.name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getDescription() {
		return this.description;
	}
	
	public void setDescription(String description) {
		this.description = description;
	}
	
	public Double getSellPrice() {
		return this.sellPrice;
	}
	
	public void setSellPrice(Double sellPrice) {
		this.sellPrice = sellPrice;
	}
	
	public double getBuyPrice() {
		return this.buyPrice;
	}
	
	public void setBuyPrice(double buyPrice) {
		this.buyPrice = buyPrice;
	}
	
	public Integer getVirtualstock() {
		return this.virtualstock;
	}
	
	public void setVirtualstock(Integer virtualstock) {
		this.virtualstock = virtualstock;
	}
	
	public Integer getSoh() {
		return this.soh;
	}
	
	public void setSoh(Integer soh) {
		this.soh = soh;
	}
	
	public Integer getStockMin() {
		return this.stockMin;
	}
	
	public void setStockMin(Integer stockMin) {
		this.stockMin = stockMin;
	}
	
	public Integer getStockMax() {
		return this.stockMax;
	}
	
	public void setStockMax(Integer stockMax) {
		this.stockMax = stockMax;
	}
	
	public Set getItemsLines() {
		return this.itemsLines;
	}
	
	public void setItemsLines(Set itemsLines) {
		this.itemsLines = itemsLines;
	}
	
	public Set getOrderDetails() {
		return this.orderDetails;
	}
	
	public void setOrderDetails(Set orderDetails) {
		this.orderDetails = orderDetails;
	}
	
	public Set getSendingDetails() {
		return this.sendingDetails;
	}
	
	public void setSendingDetails(Set sendingDetails) {
		this.sendingDetails = sendingDetails;
	}
	
	public Set getTransactions() {
		return this.transactions;
	}
	
	public void setTransactions(Set transactions) {
		this.transactions = transactions;
	}
	
	public Set getReceptionDetails() {
		return this.receptionDetails;
	}
	
	public void setReceptionDetails(Set receptionDetails) {
		this.receptionDetails = receptionDetails;
	}
	
	public Double getAMC() {
		return AMC;
	}
	
	public void setAMC(Double AMC) {
		this.AMC = AMC;
	}
	
	public int getNumberOfExpiredLots() {
		int number = 0;
		Iterator<ItemsLine> itr = itemsLines.iterator();
		while (itr.hasNext()) {
			ItemsLine myItemsLine = itr.next();
			
			if (myItemsLine.getItemSoh() > 0 && (new Date()).after(myItemsLine.getItemExpiryDate())) {
				number++;
			}
		}
		
		return number;
	}
	
	public void setNumberOfExpiredLots(int numberOfExpiredLots) {
		this.numberOfExpiredLots = numberOfExpiredLots;
	}
	
	public int getExpiredQuantity() {
		int number = 0;
		Iterator<ItemsLine> itr = itemsLines.iterator();
		while (itr.hasNext()) {
			ItemsLine myItemsLine = itr.next();
			
			if (myItemsLine.getItemSoh() > 0 && (new Date()).after(myItemsLine.getItemExpiryDate())) {
				number = number + myItemsLine.getItemSoh();
			}
		}
		
		return number;
	}
	
	public void setExpiredQuantity(int expiredQuantity) {
		this.expiredQuantity = expiredQuantity;
	}
	
	public int getNumberOfNearExpiredLots() {
		String gp = Context.getAdministrationService().getGlobalProperty(
		    SavicsPharmacyModuleActivator.GLOBAL_PROPERTY_PHARMACY_EXPIRED_DELAY);
		if (gp == null) {
			throw new RuntimeException("You must set the batch expiration prevision delay in global properties: "
			        + SavicsPharmacyModuleActivator.GLOBAL_PROPERTY_PHARMACY_EXPIRED_DELAY);
		}
		
		int delay = new Integer(gp);
		
		int number = 0;
		Iterator<ItemsLine> itr = itemsLines.iterator();
		while (itr.hasNext()) {
			ItemsLine myItemsLine = itr.next();
			Instant today = new Date().toInstant();
			Instant lotExpiredInstant;
			
			if (myItemsLine.getItemSoh() > 0 && today != null && myItemsLine.getItemExpiryDate() != null) {
				lotExpiredInstant = myItemsLine.getItemExpiryDate().toInstant();
				if (ChronoUnit.DAYS.between(today, lotExpiredInstant) > 0
				        && ChronoUnit.DAYS.between(today, lotExpiredInstant) <= delay) {
					number = number + 1;
				}
			}
		}
		
		return number;
	}
	
	public void setNumberOfNearExpiredLots(int numberOfNearExpiredLots) {
		this.numberOfNearExpiredLots = numberOfNearExpiredLots;
	}
	
}
